<?php
/**
 * @file
 *   Voicemail implementation for voipnode.module
 */

/**
 * Implementation of hook_menu().
 */
function voicemail_node_menu() {
  $items = array();

  $items['admin/settings/voipnode/voicemail'] = array(
    'title' => 'Voicemail defaults',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('voicemail_node_admin_settings'),
    'access arguments' => array('voipnode_admin_settings'),
    'file' => 'voicemail_node.admin.inc',
    'type' => MENU_LOCAL_TASK,
  );
  $items['node/%node/voicemail'] = array(
    'title' => 'Voicemail box',
    'page callback' => 'voicemail_node_page_voicemail_box',
    'page arguments' => array(1),
    'access callback' => 'voicemail_node_views_access',
    'access arguments' => array(1),
    'type' => MENU_LOCAL_TASK,
  );

  return $items;
}

/**
 * Implementation of hook_menu_alter().
 *
 * Allow access to limited settings form for users with administer voipnode permissions.
 * Remove access to delete the field.
 */
function voicemail_node_menu_alter(&$items) {
  module_load_include('inc', 'voicemail_node', 'voicemail_node.cck_fields');
  $node_types = node_get_types();

  foreach ($node_types as $node_type => $node_type_details) {
    foreach (_voicemail_node_audio_fields_names() as $field_name) {
      if (isset($items['admin/content/node-type/'.$node_type.'/fields/' . $field_name])) {
        $items['admin/content/node-type/'.$node_type.'/fields/' . $field_name]['access callback'] = 'user_access';
        $items['admin/content/node-type/'.$node_type.'/fields/' . $field_name]['access arguments'] = array('administer voipnode settings');
      }
      if (isset($items['admin/content/node-type/'.$node_type.'/fields/' . $field_name .'/remove'])) {
        $items['admin/content/node-type/'.$node_type.'/fields/' . $field_name .'/remove']['access callback'] = FALSE;
      }
    }
  }
}

/**
 * Access callback for Voicmail implemented views for Users.
 * @return
 *   Boolean TRUE if authorized else FALSE
 */
function voicemail_node_views_access($node, $account = NULL) {
  if (variable_get('voicemail_node_use_'. $node->type, FALSE) && ! empty($node->voicemail_enabled)) {
    return node_access('view', $node);
  }
  return FALSE;
}

/**
 * Implementation of hook_perm().
 */
function voicemail_node_perm() {
  return array('access all voicemail mailboxes', 'administer voicemail mailboxes');
}

/**
 * Implementation of hook_form_alter().
 */
function voicemail_node_form_alter(&$form, &$form_state, $form_id) {
  if (isset($form['type']) && isset($form['#node']) && ($form_id == $form['type']['#value'] .'_node_form') && variable_get('voicemail_node_use_'. $form['type']['#value'], FALSE)) {
    // node add/edit form
    _voicemail_node_edit_form_alter($form, $form_state, $form_id);
  }

  switch ($form_id) {
    case 'node_type_form':
      module_load_include('inc', 'voicemail_node', 'voicemail_node.admin');
      _voicemail_node_type_form_alter($form, $form_state);
      break;
    case 'content_field_edit_form':
      // content type settings form
      module_load_include('inc', 'voicemail_node', 'voicemail_node.cck_fields');
      $field_names = _voicemail_node_audio_fields_names();
      if (! variable_get('voicemail_node_use_'. $form['type']['#value'], FALSE) && in_array($form['#field']['field_name'], $field_names)) {
        // the can only be one value per voicemail_greetings field.
        $form['field']['multiple']['#type'] = 'value';
        $form['field']['multiple']['#default_value'] = 0;
        // the description doesn't make sense at the moment.
        $form['field']['description_field']['#type'] = 'hidden';
      }
      break;
  }
}

/**
 * Alter node add/edit form.
 */
function _voicemail_node_edit_form_alter(&$form, &$form_state, $form_id) {
  $node = $form['#node'];
  $content_type = $node->type;

  $form['voicemail_enabled'] = array(
    '#type' => 'checkbox',
    '#title' => t('Voicemail enabled'),
    '#description' => t('If voicemail can be left for this extension.'),
    '#default_value' => (isset($node->voicemail_enabled)) ? $node->voicemail_enabled : variable_get('voicemail_node_default_status_'. $content_type, variable_get('voicemail_node_default_status', 0)),
    '#return_value' => 1,
    '#weight' => 12,
  );

}

/**
 * Submit callback for _voipnode_node_type_form_submit().
 */
function voicemail_node_type_form_submit($form, &$form_state) {
  module_load_include('inc', 'voicemail_node', 'voicemail_node.admin');
  _voicemail_node_type_form_submit($form, $form_state);
}

/**
 * Implementation of fieldgroup.module hook_fieldgroup_form().
 *
 * Move script and listing options into the content fieldset.
 */
function voicemail_node_fieldgroup_form(&$form, $form_state, $form_id, $group) {
  $group_name = $group['group_name'];
  if ($group_name == 'group_voipnode_settings') {
    $fields = array('voicemail_greeting', 'voicemail_enabled');
    foreach ($fields as $field) {
      if (isset($form[$field])) {
        $form[$group_name][$field] = $form[$field];
        unset($form[$field]);
      }
    }
  }
}


/**
 * Implementation of hook_nodeapi().
 */
function voicemail_node_nodeapi(&$node, $op, $a3 = NULL, $a4 = NULL) {
  if (! variable_get('voicemail_node_use_'. $node->type, FALSE)) {
    return;
  }

  switch ($op) {
    case 'insert':
    case 'update':
      try {
        try {
          $mailbox = VoicemailBox::loadMailbox($node->voipextension_number);
          $mailbox->setEnabled($node->voicemail_enabled);
          $mailbox->save();
        }
        catch (VoicemailBoxNotExistsException $e) {
          $mailbox = Voicemail::createMailbox($node->voipextension_number, $node->voicemail_enabled);
        }
      }
      catch (Exception $e) {
        watchdog('voicemail_node', $e->getMessage(), WATCHDOG_ERROR);
        drupal_set_message(t('Failed to create voicemail box for %title', array('%title' => $node->title), 'warning'));
      }
      break;
    case 'load':
      // voicemail boxes are created on demand if appropriate.
      // This happens if the node is viewed, but also when the extension is called.
      try {
        try {
          $mailbox = VoicemailBox::loadMailbox($node->voipextension_number);
        }
        catch (VoicemailBoxNotExistsException $e) {
          $mailbox = VoicemailBox::createMailbox($node->voipextension_number, variable_get('voicemail_node_default_status_'. $node->type, variable_get('voicemail_node_default_status', 0)));
        }
      }
      catch (Exception $e) {
        watchdog('voicemail_node', $e->getMessage(), WATCHDOG_ERROR);
        break;
      }
      $node->voicemail_enabled = $mailbox->getEnabled();
      break;
    case 'delete':
      VoicemailBox::delete($node->voipextension_number);
      break;
  }
}

/**
 * Implementation of hook_preprocess_foo().
 *
 * Stop moving audio fields on node form. 
 * The fieldset to be able to be move all extension settings on the form.
 *
 * @todo This shouldn't be in a hook_preprocess function really?
 *   see also note on voipnode_menu().
 *
 * @param $variables
 *   Theme Variables array.
 */
function voicemail_node_preprocess_content_field_overview_form(&$variables) {
  $escape_fields_array = array(
    'field_voicemail_greeting',
  );
  foreach ($variables['rows'] as $index => $row) {
    if (isset($row->field_name) && in_array($row->field_name, $escape_fields_array)) {
      unset($variables['rows'][$index]);
    }

    if ($row->row_type == 'group' && isset($row->group_name) && ($row->group_name == 'group_voipnode_settings')) {
      $variables['rows'][$index]->remove = '';
    }
  }
}

/**
 * Implementation of hook_voipscript_get_script_names().
 */
function voicemail_node_voipscript_get_script_names() {
  return array(
    'voicemail_node_basic',
  );
}

/**
 * Implementation of hook_voipscript_load_script().
 */
function voicemail_node_voipscript_load_script($script_name, $params = NULL) {
  if ($script_name == 'voicemail_node_basic') {
    module_load_include('inc', 'voicemail_node', 'voicemail_node.script');
    $node = node_load($params['nid']);
    return _voicemail_node_get_basic_script($node);
  }
}

/**
 * Menu callback; show node mailbox.
 */
function voicemail_node_page_voicemail_box($node) {
  return views_embed_view('voicemail_box', 'default', $node->voipextension_number);
}
